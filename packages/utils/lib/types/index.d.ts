declare const _default: {
    debounce(fn: any, timeout?: number): (...args: any[]) => void;
    throttle(fn: any, timeout?: number): (...args: any[]) => void;
    deepClone(data: any): any;
    timeChunk(ary: any[], fn: Function, count: number, interval: number): () => void;
    EventSystem: typeof EventSystem.EventSystem;
    EventSystemInstance: EventSystem.EventSystem;
    findParentComponent(context: any, componentName: string | any[]): any;
    getQueryObject(qs?: string): any;
    resolveURL(url: string): URLOrigin;
    sequenceParam(obj: any): string;
    isURLSameOrigin(requestURL: any, requestURL2?: any): boolean;
    isAbsoluteURL(url: string): boolean;
    combineURL(baseURL: string, relativeURL?: string): string;
    getImgURLBlob(url: string): Promise<any>;
    getOrigin(): string;
    isEmpty(obj: Any): boolean;
    isArray(arr: any): boolean;
    isArrayLike(collection: Collection): boolean;
    typeOf(obj: any): string;
    isInteger(number: any): boolean;
    isFinite(val: any): any;
    isFunction(fn: Any): boolean;
    isEmptyArrOrObj(obj: Any): boolean;
    formatListToTree({ data, id, pid, child, labels, }: any[]): any[];
    formatTree(data: any[], options: any): any[];
    uuid(): string;
    isSpecialChar(str: any): boolean;
    reverseString(str: string): string;
    default(params: any, num: any): string;
    transJson(params: string): JSON;
    str2kebab: (str: string) => string;
    randomFloat(min?: number, max?: number, precision?: number): number;
    randomInt(min: number, max: number): number;
    randomNumber(min: number, max: number): number;
    randomWord(randomFlag: string, min: string, max: string): string;
    randomWordByLength(len?: number): string;
    randomColor(): string;
    randomRGBColor(): string;
    randomRGBAColor(): string;
    median(...numbers: number[]): number;
    mode(...args: any[]): any;
    range(start: number, end: number, step?: number, skip?: {
        start: number;
        end: number;
    }[]): number[];
    fixedDecimal(originalNum: any, keepCount?: number, round?: boolean, keepNegativeZero?: boolean): string;
    dataURL2Blob(dataurl: string): Blob;
    dataURL2File(dataurl: string, filename: string): File;
    blob2DataURL(blobOrFile: Blob | File): Promise<any>;
    file2Blob(file: File): Promise<any>;
    blob2File(blob: Blob, name: string): File;
    blob2ObjectURL(blobOrFile: Blob | File): string | Error;
    _btoa(s: string): string;
    _atob(s: string): string;
    Linear(t: number, b: number, c: number, d: number): number;
    easeIn(t: number, b: number, c: number, d: number): number;
    easeOut(t: number, b: number, c: number, d: number): number;
    easeInOut(t: number, b: number, c: number, d: number): number;
    addClass(el: Element, className: string): void;
    removeClass(el: Element, className: string): void;
    hasClass(el: Element, className: string): boolean;
    getData(el: Element, name: string, val: Any): string | void;
    getRect(el: Element): {
        top: any;
        left: any;
        width: any;
        height: any;
    };
    copyToClipboard(str: string): void;
    scrollToTop(): void;
    getStyle(ele: any): any;
    addStyle(el: Element, styleObj: any): void;
    canSupportCssVar(): any;
    supportWebp(): boolean;
    loadCss(href: string, options?: any): Promise<any>;
    loadJs(src: string, options?: any): Promise<any>;
    getScrollbarWidth(): number;
    getDateString(ts: string | number | Date, format?: string): any;
    getDatetimeString(ts: string | number | Date, format?: string): any;
    getNowDate(seperator?: string): string;
    getDaysInOneMonth({ year, month }: string): number;
    isValidDate(date: Date): boolean;
    ms2s(ms: number): number;
    ms2m(ms: number): number;
    ms2h(ms: number): number;
    choice(array: any[]): any;
    findBigObject(array: any[], prop: string, returnOnlyValue?: boolean): any;
    findLowObject(array: any[], prop: string, returnOnlyValue?: boolean): any;
    moveLeft(array?: any[], times?: number): any[];
    moveRight(array?: any[], times?: number): any[];
    shuffle(array: any[], mutateOriginal?: boolean): any[];
    chunk(array: [type], size: [type]): [type];
    filterSort(src: any[], sortArray?: string[], key?: string): any[];
    sortAscending(arr: number[], mutateOriginal?: boolean): number[];
    sortAscendingObject(arr: any[], prop: string, mutateOriginal?: boolean): any[];
    sortDescending(arr: number[], mutateOriginal?: boolean): number[];
    sortDescendingObject(arr: any[], prop: string, mutateOriginal?: boolean): any[];
    flatten: (arr: any[]) => any;
};
export default _default;
import * as EventSystem from './EventSystem';
